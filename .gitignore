#!/usr/bin/env python

import rospy
import smach
import smach_ros

from std_msgs.msg import Bool
from sensor_msgs.msg import Joy

modeCounter = 1
wasButtonPush = False

class JoyTwist(object):
	def __init__(self):
		self._joy_sub = rospy.Subscriber('joy', Joy, self.joy_callback, queue_size=1)

	def joy_callback(self, joy_msg):
		global modeCounter
		global wasButtonPush
		if joy_msg.buttons[16] == 1:
			if wasButtonPush == 0:
				modeCounter = modeCounter + 1
				wasButtonPush = True
		else:
			wasButtonPush = False

		if modeCounter == 5:
			modeCounter = 1

class Stand_by_mode(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['done', 'doing'])

    def execute(self, userdata):
        if modeCounter == 2:
            return 'done'
        else:
            return 'doing'

class Search_mode(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['done', 'doing'])

    def execute(self, userdata):
        if modeCounter == 3:
            return 'done'
        else:
            return 'doing'

class Harvest_mode(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['done', 'doing'])

    def execute(self, userdata):
        if modeCounter == 4:
            return 'done'
        else:
            return 'doing'

class Transport_mode(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['done', 'doing'])

    def execute(self, userdata):
        if modeCounter == 1:
            return 'done'
        else:
            return 'doing'

def main():
    sm_top = smach.StateMachine(outcomes=[''])
    with sm_top:
        smach.StateMachine.add('Stand_by_mode', Stand_by_mode(), transitions={'done':'Search_mode' , 'doing':'Stand_by_mode'})
        smach.StateMachine.add('Harvest_mode', Harvest_mode(), transitions={'done':'Transport_mode' , 'doing':'Harvest_mode'})
        smach.StateMachine.add('Search_mode', Search_mode(), transitions={'done':'Harvest_mode' , 'doing':'Search_mode'})
        smach.StateMachine.add('Transport_mode', Transport_mode(), transitions={'done':'Stand_by_mode' , 'doing':'Transport_mode'})

    sis = smach_ros.IntrospectionServer('smach_server', sm_top, '/SM_ROOT')
    sis.start()
    outcome = sm_top.execute()
    sis.stop()

if __name__ == '__main__':
    rospy.init_node('smach_somple2')
    joy_twist = JoyTwist()
    main()
    rospy.spin()
